<?php

namespace FrontendBundle\Repository;

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\Common\Persistence\ManagerRegistry;
use Doctrine\DBAL\DriverManager;

/**
 * CoursIndependantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CoursIndependantRepository extends \Doctrine\ORM\EntityRepository {

    /**
     * Insertion d'un cours
     */
    public function insertCours($cours, $em) {
        $sql = "INSERT INTO COURS_INDEPENDANT (module_independant_id, Debut, Fin, DureeReelleEnHeures, CodePromotion, PrixPublicAffecte, DateCreation, LibelleCours, DureePrevueEnHeures, DateAdefinir, CodeLieu) VALUES (:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11)";
        $params = array(
            ':1' => $cours->getModuleIndependant()->getIdModule(),
            ':2' => $cours->getDebut()->format('Y-m-d H:i:s'),
            ':3' => $cours->getFin()->format('Y-m-d H:i:s'),
            ':4' => $cours->getDureereelleenheures(),
            ':5' => null,
            ':6' => $cours->getPrixpublicaffecte(),
            ':7' => $cours->getDateCreation()->format('Y-m-d H:i:s'),
            ':8' => $cours->getLibellecours(),
            ':9' => $cours->getDureePrevueenheures(),
            ':10' => false,
            ':11' => $cours->getCodeLieu());

        $em->getConnection()->prepare($sql)->execute($params);

        return $cours;
    }

    /**
     * Recuperation du dernier id ajouté
     */
    public function getId($cours, $em) {
        $repository = $em->getRepository('FrontendBundle:CoursIndependant');
        $cours_temp = $repository->findby(array('datecreation' => $cours->getDatecreation(), 'debut' => $cours->getDebut()));

        return $cours_temp;
    }

    /**
     * Recuperation du cours à partir de son module
     */
    public function getCours($id, $em) {
        $repository = $em->getRepository('FrontendBundle:CoursIndependant');
        $cours_temp = $repository->findby(array('moduleIndependant' => $id), array('debut' => 'ASC'));

        return $cours_temp;
    }

    /**
     * Recupere le premier cours
     */
    public function getCoursFirst($id, $em) {
        $repository = $em->getRepository('FrontendBundle:CoursIndependant');
        $cours_temp = $repository->findOneby(array('moduleIndependant' => $id));

        return $cours_temp;
    }

    /**
     * Recupere un cours à partir de sa date de debut
     */
    public function getCoursDateDebutFirst($date, $em) {
        $repository = $em->getRepository('FrontendBundle:CoursIndependant');
        $cours_temp = $repository->findOneby(array('debut' => $date));

        return $cours_temp;
    }

    /**
     * Recupere un cours à partir de sa date de fin
     */
    public function getCoursDateFinFirst($date, $em) {
        $repository = $em->getRepository('FrontendBundle:CoursIndependant');
        $cours_temp = $repository->findOneby(array('fin' => $date));

        return $cours_temp;
    }

    /**
     * Test sur la date 1
     */
    public function getCoursDateTest1($deb, $fin, $em) {
        $sql = "SELECT c.idCours 
                FROM FrontendBundle:CoursIndependant c  
                WHERE c.debut <= '" . $deb . "' AND c.fin >='" . $fin . "'";

        $query = $em->createQuery($sql);

        return $query->getResult();
    }

    /**
     * Test sur la date 2
     */
    public function getCoursDateTest2($deb, $fin, $em) {
        $sql = "SELECT c.idCours 
                FROM FrontendBundle:CoursIndependant c  
                WHERE c.fin >= '" . $deb . "' AND c.fin <='" . $fin . "'";

        $query = $em->createQuery($sql);

        return $query->getResult();
    }

    /**
     * Test sur la date 3
     */
    public function getCoursDateTest3($deb, $fin, $em) {
        $sql = "SELECT c.idCours 
                FROM FrontendBundle:CoursIndependant c  
                WHERE c.debut >= '" . $deb . "' AND c.debut <='" . $fin . "'";

        $query = $em->createQuery($sql);

        return $query->getResult();
    }

    /**
     * Suppression d'un cours
     */
    public function removeCours($cours, $em) {
        $em->remove($cours);
        $em->flush();

        return $cours;
    }

    /**
     * Recuperation du cours par son id
     */
    public function getCoursbyId($cours, $em) {
        $repository = $em->getRepository('FrontendBundle:CoursIndependant');
        $cours_temp = $repository->find($cours);

        return $cours_temp;
    }

    /**
     * Recuperation du cours par son id
     */
    public function getCours2ById($cours, $em) {
        $repository = $em->getRepository('FrontendBundle:CoursIndependant');
        $cours_temp = $repository->findby(array('idCours' => $cours));

        return $cours_temp;
    }

}
